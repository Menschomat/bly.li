name: bly.li - CI Pipeline
on:
  push:
    branches:
      - main
    tags:
      - "*"
env:
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY: ${{ github.repository }}
jobs:
  extract_version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.version_step.outputs.version }}
      version_tag: ${{ steps.version_step.outputs.version_tag }}
      latest_tag: ${{ steps.version_step.outputs.latest_tag }}
    steps:
      - name: Extract Version
        id: version_step
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=${VERSION}"           >> $GITHUB_OUTPUT
            echo "version_tag=${VERSION}"       >> $GITHUB_OUTPUT
            echo "latest_tag=latest"            >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            echo "version=main"                 >> $GITHUB_OUTPUT
            echo "version_tag=main"             >> $GITHUB_OUTPUT
          fi
      - name: Print Version
        run: |
          echo "version_tag=${{ steps.version_step.outputs.version_tag }}"
          echo "latest_tag= ${{ steps.version_step.outputs.latest_tag }}"
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown
  setup_docker:
    runs-on: ubuntu-24.04
    needs: extract_version
    outputs:
      version: ${{ needs.extract_version.outputs.version }}
      version_tag: ${{ needs.extract_version.outputs.version_tag }}
      latest_tag: ${{ needs.extract_version.outputs.latest_tag }}
    steps:
      - name: Read version+latest-tag into ENV
        run: |
          echo "VERSION=${{ needs.extract_version.outputs.version }}"         >> $GITHUB_ENV
          echo "VERSION_TAG=${{ needs.extract_version.outputs.version_tag }}" >> $GITHUB_ENV
          if [ -n "${{ needs.extract_version.outputs.latest_tag }}" ]; then
            echo "LATEST_TAG=${{ needs.extract_version.outputs.latest_tag }}" >> $GITHUB_ENV
          fi
  build_frontend:
    runs-on: ${{ matrix.platform.runner }}
    needs: setup_docker
    strategy:
      matrix:
        platform:
          - { name: "amd64", runner: "ubuntu-24.04", suffix: "amd64" }
          - { name: "arm64", runner: "ubuntu-24.04-arm", suffix: "arm64" }
    steps:
      - name: Compute lowercase repo name
        run: |
          echo "GITHUB_REPOSITORY_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
        env:
          GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:src/services/front/."
          file: Dockerfile
          push: true
          platforms: linux/${{ matrix.platform.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:${{ needs.setup_docker.outputs.version_tag }}-${{ matrix.platform.suffix }}
          build-args: |
            VERSION=${{ needs.setup_docker.outputs.version }}
            SERVICE=front
  build_backend:
    runs-on: ${{ matrix.platform.runner }}
    needs: setup_docker
    strategy:
      matrix:
        service: [blowup, shortn, dasher, perso]
        platform:
          - { name: "amd64", runner: "ubuntu-24.04", suffix: "amd64" }
          - { name: "arm64", runner: "ubuntu-24.04-arm", suffix: "arm64" }
    steps:
      - name: Compute lowercase repo name
        run: |
          echo "GITHUB_REPOSITORY_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
        env:
          GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:src/."
          file: Dockerfile
          push: true
          platforms: linux/${{ matrix.platform.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/${{ matrix.service }}:${{ needs.setup_docker.outputs.version_tag }}-${{ matrix.platform.suffix }}
          build-args: |
            VERSION=${{ needs.setup_docker.outputs.version }}
            SERVICE=${{ matrix.service }}
  create_manifests:
    runs-on: ubuntu-24.04
    needs: [build_frontend, build_backend, setup_docker]
    steps:
      - name: Compute lowercase repo name
        run: |
          echo "GITHUB_REPOSITORY_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
        env:
          GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create frontend manifest
        run: |
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:${{ needs.setup_docker.outputs.version_tag }} \
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:${{ needs.setup_docker.outputs.version_tag }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:${{ needs.setup_docker.outputs.version_tag }}-arm
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:${{ needs.setup_docker.outputs.version_tag }}
          
          if [ -n "${{ env.LATEST_TAG }}" ]; then
            docker manifest create \
              ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:latest \
              ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:${{ needs.setup_docker.outputs.version_tag }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:${{ needs.setup_docker.outputs.version_tag }}-arm
              
            docker manifest push ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/front:latest
          fi
      - name: Create backend manifests
        run: |
          services=("blowup" "shortn" "dasher" "perso")
          for service in "${services[@]}"; do
            docker manifest create \
              ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:${{ needs.setup_docker.outputs.version_tag }} \
              ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:${{ needs.setup_docker.outputs.version_tag }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:${{ needs.setup_docker.outputs.version_tag }}-arm
              
            docker manifest push ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:${{ needs.setup_docker.outputs.version_tag }}
            
            if [ -n "${{ env.LATEST_TAG }}" ]; then
              docker manifest create \
                ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:latest \
                ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:${{ needs.setup_docker.outputs.version_tag }}-amd64 \
                ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:${{ needs.setup_docker.outputs.version_tag }}-arm
                
              docker manifest push ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_LC }}/$service:latest
            fi
          done