name: golang-pipeline

on:
  push:
    branches:
      - main
    tags:
      - "*"

jobs:
  extract_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_step.outputs.version }}
      version_tag: ${{ steps.version_step.outputs.version_tag }}
      latest_tag: ${{ steps.version_step.outputs.latest_tag }}
    steps:
      - name: Extract Version
        id: version_step
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "version_tag=${VERSION}" >> $GITHUB_OUTPUT
            echo "latest_tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            echo "version=main" >> $GITHUB_OUTPUT
            echo "version_tag=main" >> $GITHUB_OUTPUT
          fi
      - name: Print Version
        run: |
          echo ${{ steps.version_step.outputs.version_tag }}
          echo ${{ steps.version_step.outputs.latest_tag }}

  setup_docker:
    runs-on: ubuntu-latest
    needs: extract_version
    outputs:
      version: ${{ needs.extract_version.outputs.version }}
      version_tag: ${{ needs.extract_version.outputs.version_tag }}
      latest_tag: ${{ needs.extract_version.outputs.latest_tag }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Prepare Docker Image Identifiers
        id: read-docker-image-identifiers
        run: |
          echo "VERSION_TAG=$(echo ${{ needs.extract_version.outputs.version_tag }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          if [ -n "${{ needs.extract_version.outputs.latest_tag }}" ]; then
            echo "LATEST_TAG=$(echo ${{ needs.extract_version.outputs.latest_tag }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          fi

  build_and_push:
    runs-on: ubuntu-latest
    needs: setup_docker
    strategy:
      matrix:
        service: [blowup, shortn]
        arch: [linux/amd64, linux/arm64]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB }}
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:src/."
          cache-from: type=gha
          cache-to: type=gha,mode=max`
          file: Dockerfile
          push: true
          platforms: ${{ matrix.arch }}
          tags: |
            mensch0mat/bly.li.${{ matrix.service }}:${{ needs.setup_docker.outputs.version_tag }}
            ${{ env.LATEST_TAG && 'mensch0mat/bly.li.${{ matrix.service }}:latest' || '' }}
          build-args: |
            VERSION=${{ needs.setup_docker.outputs.version }}
            SERVICE=${{ matrix.service }}
